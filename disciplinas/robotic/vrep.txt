Introdução à plataforma de simulação robótica V-rep
---------------------------------------------------

image::imagens/introducao_vrep.png[height=250, width=300, align="center"]

V-rep (virtual robot experimentation plattform) é um simulador robótico de propósito geral com um ambiente de desenvolvimento integrado. Sensores, mecanismos, robôs e sistemas completos podem ser modelados e simulados utilizando o v-rep.

Algumas possíveis aplicações:
[options="compact"]
 - Rápida prototipagem e verificação
 - Robótica educacional
 - Monitoramento remoto
 - Controle de hardware
 - etc.

Possui APIs em 7 linguagens de programação: C/C++, Python, Java, Lua, Matlab, Octave or Urbi.

image::imagens/apis.png[height=250, width=300, align="center"]

Elementos centrais do V-rep
---------------------------

O V-rep possui 3 elementos centrais:
[options="compact"]
 - Objetos de cena
 - Módulo de cálculo
 - Mecanismos de controle

=== Objetos de cena

São os blocos básicos disponibilizados pelo V-rep para a construção de um projeto.

image::imagens/objetosdecena.png[height=350, width=450, align="center"]

=== Módulo de cálculo

Possui:
[options="compact"]
 - Detecção de colisão
 - Cálculo da distância mínima
 - Cinemática direta e inversa
 - Planejamento de caminho e movimento
 - Física / Dinâmica

image::imagens/modulodecalculo.png[height=350, width=500, align="center"]

=== Mecanismos de controle

Possui 6 interfaces de controle:
[options="compact"]
 - Scripts embarcados
 - Plugins
 - Add-ons
 - Nós ROS
 - Soluções customizadas
 - API remota

image::imagens/meccontrole.png[height=350, width=400, align="center"]

Download e instalação
---------------------

O processo de download e instalação do V-rep é bem simples: basta clicar no link http://www.coppeliarobotics.com/downloads.html[download vrep] e selecionar a opção de download adequada. Para nossos propósitos, utilizaremos a versão V-rep pro edu.

image::imagens/download.png[height=150, width=450, align="center"]

Interface principal do V-rep
----------------------------

image::imagens/maininterface.png[height=550, width=700, align="center"]

﻿Formas de modelar um robô no v-rep
----------------------------------

Basicamente existem duas formas de modelar os robôs:
[options="compact"]
 - Modelagem utilizando elemento básicos;
 - Modelagem utilizando CAD.

A imagem destaca os elementos básicos como plano, circulo, esféra, cubo e cilinndro.

image::imagens/ModelagemBasica.png[height=250, width=300, align="center"]

Já em CAD, o usuário é responsáveis por projetar cada peça.

image::imagens/modelagem.png[height=250, width=300, align="center"]


Além dos elementos estruturais, já citados, pode-se ainda destacar elementos alguns outros utilizados, como Juntas, Sensores, Dummy, câmera, gráficos, luz e espelho, .

image::imagens/ModelagemBasicaJuntas.png[height=250, width=300, align="center"]

image::imagens/ModelagemBasicaSensores.png[height=250, width=300, align="center"]

Como pode-se observar, existem três tipo de juntas, a rotacional, prismática e esférica. Cada uma com suas particularidades.
[options="compact"] 
 - Rotacional: Rotaciona apenas em eixo;
 - Primática: Realiza uma translação em um eixo;
 - Esférica: Rotacional nos três eixos.

Outro ponto é a possibilidade de utilizar vários tipos de sensores:
[options="compact"] 
 - Força;
 - Proximidade;
 - Visão;
 - Laser;
 - etc.

=== Parâmetros dos possíveis objetos de cena
[options="compact"]
 - Câmera;

image::imagens/cameraProperties1.jpg[height=250, width=300, align="center"]

 - Dummy;

image::imagens/dummyDialog1.jpg[height=250, width=300, align="center"]

 - Sensor de força;

image::imagens/forceSensorDialog1.jpg[height=250, width=300, align="center"]

 - Gráficos;

image::imagens/graphDialog1.jpg[height=250, width=300, align="center"]

 - Juntas;

image::imagens/jointDialog1.jpg[height=250, width=300, align="center"]

 - Luz;

image::imagens/lightProperties1.jpg[height=250, width=300, align="center"]

 - Espelho;

image::imagens/mirrorDialog1.jpg[height=250, width=300, align="center"]


=== Como Utilizar cada componente
[options="compact"]
 - Adicionar Objetos a cena (Add);
   * Clicar em "Add" e escolher que componente se deseja adicionar.
 - Dimensões;

image::imagens/geometryDialog.jpg[height=250, width=300, align="center"]

 - Parâmetros de posicionamento e orientação;

image::imagens/orientationAndRotationDlg.jpg[height=250, width=300, align="center"]

 - Parâmetros comuns.

image::imagens/objectCommonDlg2.jpg[height=250, width=300, align="center"]


=== Uso das funções de Grouping/Merging
[options="compact"]
 - Grouping;
  * Agrupar um conjunto de objetos. Dessa forma é possível manipulá-los como um só. 
 - Merging;
  * De forma análoga ao Grouping, mas nesse modo objetos são deslocados para o referencial do primeiro obejto.


=== Modelando o primeiro objeto
[options="compact"]
 - O modelo Phantom Omni foi escolhi como referência para a modelagem.

image::imagens/LargePHANTOMOmniImage.jpg[height=250, width=300, align="center"]

 - Vídeo: https://www.youtube.com/watch?v=REA97hRX0WQ
 
 - Esse modelo possui três juntas rotacionais e três elos como componentes principais.

 
Assim pode-se então começar o desenvolvimento a partir da base que servirá como sustentação para o nosso modelo.

image::imagens/Parabase.png[height=250, width=300, align="center"]
image::imagens/ParabaseOrientacao.png[height=250, width=300, align="center"]
image::imagens/ParabasePosicao.png[height=250, width=300, align="center"]

Precisamos agora inserir a primeira junta que será responsável pela rotação da base.

image::imagens/ParaJunta1.png[height=250, width=300, align="center"]
image::imagens/Parajunta1Orientacao.png[height=250, width=300, align="center"]
image::imagens/Parajunta1Posicao.png[height=250, width=300, align="center"]

Após a definição da junta 1 se define o Elo 1. 

image::imagens/ParaElo1.png[height=250, width=300, align="center"]
image::imagens/ParaElo1Orientacao.png[height=250, width=300, align="center"]
image::imagens/ParaElo1Posicao.png[height=250, width=300, align="center"]

De forma análoga aos demais elementos foram construídos os outros componentes.

Junta 2:

image::imagens/ParaJunta2.png[height=250, width=300, align="center"]
image::imagens/Parajunta2Orientacao.png[height=250, width=300, align="center"]
image::imagens/Parajunta2Posicao.png[height=250, width=300, align="center"]


Elo 2:

image::imagens/ParaElo2.png[height=250, width=300, align="center"]
image::imagens/ParaElo2Orientacao.png[height=250, width=300, align="center"]
image::imagens/ParaElo2Posicao.png[height=250, width=300, align="center"]

Junta 3:

image::imagens/ParaJunta3.png[height=250, width=300, align="center"]
image::imagens/Parajunta3Orientacao.png[height=250, width=300, align="center"]
image::imagens/Parajunta3Posicao.png[height=250, width=300, align="center"]

Elo 3:

image::imagens/ParaElo3.png[height=250, width=300, align="center"]
image::imagens/ParaElo3Orientacao.png[height=250, width=300, align="center"]
image::imagens/ParaElo3Posicao.png[height=250, width=300, align="center"]

Garra :

image::imagens/Paragarra.png[height=250, width=300, align="center"]
image::imagens/ParagarraOrientacao.png[height=250, width=300, align="center"]
image::imagens/ParagarraPosicao.png[height=250, width=300, align="center"]


Simulação
---------

=== Parâmetros da simulação
[options="compact"]
 - Velocidade;
 - Tempo amostral;
 - Método de integração;
 - Tempo real;
 - etc.

image::imagens/barradesimulacao.png[height=50, width=700, align="center"]

=== Parâmetros dos objetos

Parâmetros como velocidade de uma junta, torque, PID e força interferem diretamente na simulação, tais parâmentros influenciam na dinâmica do sistema como um todo.


Controlando a posição de um robô com o V-REP
--------------------------------------------

Após desenvolver o modelo do robô, partimos para o seu controle de posição. O nosso objetivo é fazer como que a garra (ou a ponta) do robô vá para uma posição desejada. Para isto, utilizaremos a ferramenta de cinemática inversa (FCI) do módulo de cálculo. A FCI utiliza dois 'Dummies' (frames de referência) em seu funcionamento, um no robô e outro que será o alvo. Com essas duas informações, a FCI é capaz de calcular os ângulos das juntas que fazem o 'dummy' que está no robô se encontrar com o 'dummie' alvo, caso isto seja possível.

De início, é preciso inserir os dois 'dummies' que serã utilizados pela FCI. No menu superior, vá em add -> dummy. Renomei-o para *garra*. Realize a mesma operação novamente para adicionar outro 'dummy', e renomei-o para *alvo*. 

image::imagens/dummies1.png[height=350, width=500, align="center"]

Agora é preciso conectar os dois 'dummies'. Para isto, clique no 'dummy' *garra* e em seguida, pressionando o botão ctrl, clique no 'dummy' *alvo*. Após selecionar os dois 'dummies' faça: botão direito do mouse -> edit -> link selected dummies -> IK tip-target. 

image::imagens/dummies2.png[height=350, width=400, align="center"]

Faça o 'dummy' *garra* ser filho (na árvore hierárquica) da garra do seu robô e em seguida posicione-o sobre a garra.

image::imagens/dummies3.png[height=350, width=500, align="center"]

Abra então a janela do módulo de cálculo. Isto pode ser feito de duas formas: selecionando o botão f(x) na barra de ferramentas 1 ou pelo menu superior em Tools -> Calculation module properties.

image::imagens/ik1.png[height=350, width=400, align="center"]

Na parte superior da janela do módulo de cálculo, selecione o botão 'Inverse kinematics'. Em seguida, clique em 'Add new IK group'. Deverá aparecer na janela inferior um novo grupo, que por padrão tem nome 'IK_Group'. Modifique o método de cálculo ('Calc. method') para DLS. Em seguida clique em 'Edit IK elements' para abrir a janela 'IK Elements'. 

image::imagens/ik2.png[height=350, width=250, align="center"]

Nesta janela, selecione o objeto que será utilizado como ponta (no nosso caso, o 'dummy' *garra*) e clique em 'Add new IK element with tip:'. Vá em 'Base' e selecione a base do seu robô.

image::imagens/ik3.png[height=350, width=250, align="center"]

Pronto! Se as juntas do seu robô estiverem configuradas corretamente, basta clicar no botão play e movimentar o 'dummy' *alvo* pelo ambiente que o seu robô tentará alcançá-lo.

Mais detalhes sobre a janela do FCI podem ser encontrados em -> http://www.coppeliarobotics.com/helpFiles/en/ikDialog.htm[janela FCI v-rep].

Gráficos
--------
[options="compact"]
 - Adicionado através da interface ou de um script
   * Inserir
   * Configurar
   * Setar a visualização
   * Visualizando

image::imagens/adicaografico1.png[height=350, width=500, align="center"]

image::imagens/adicaografico2.png[height=350, width=250, align="center"]
image::imagens/adicaografico3.png[height=200, width=250, align="center"]

image::imagens/adicaografico4.png[height=250, width=500, align="center"]

image::imagens/adicaografico5.png[height=350, width=500, align="center"]


Mecanismos de controle
----------------------
[options="compact"]
 - Scripts Embutidos
 - Plugins
 - Add-ons
 - ROS node
 - API remota

=== Scripts Embutidos
[options="compact"]
 - Linguagem em Lua
 - Possibilidade de criar scripts individuais (modelos construídos)

image::imagens/inserindoScriptEmbutido1.png[height=250, width=550, align="center"]

 - Modificar scripts de modelos já predefinidos

image::imagens/inserindoScriptEmbutido2.png[height=250, width=550, align="center"]

A partir dos scripts embutidos podemos ler, setar e aplicar restrições as informações, 
tais como: força, velocidade, posição, colisão, tempo, cinemática, proximidade de um 
sensor e etc. 

Exemplo: SimReadProximitySensor e SimSetJointTargetVelocity

=== Código
[source,c]
----
include::codes/pioneer3at.lua[]
----

=== Descrição do programa
Foram incluídas nas primeiras linhas do arquivo link:codes/pioneer3at.lua[pioneer3at.lua] todas as configurações necessárias para o funcionamento adequado do modelo do robô Pioneer 3-AT.
[source, c]
----
if (sim_call_type==sim_childscriptcall_initialization) then 
    usensors={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
    for i=1,16,1 do
        usensors[i]=simGetObjectHandle("Pioneer_p3dx_ultrasonicSensor"..i)
    end
    motorLeft=simGetObjectHandle("Pioneer_p3dx_leftMotor")
    motorRight=simGetObjectHandle("Pioneer_p3dx_rightMotor")
    noDetectionDist=0.5
    maxDetectionDist=0.2
    detect={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    braitenbergL={-0.2,-0.4,-0.6,-0.8,-1,-1.2,-1.4,-1.6, 0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
    braitenbergR={-1.6,-1.4,-1.2,-1,-0.8,-0.6,-0.4,-0.2, 0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
    v0=2
end 
----

Como o Pioneer 3-AT contém 16 sensores utrassons, necessitamos iniciar cada um deles, então o próximo trecho de código realiza a leitura das distâncias e organizam o grau de detecção de cada sensor no vetor 'detect'.
[source, c]
----
for i=1,16,1 do
        res,dist=simReadProximitySensor(usensors[i])
        if (res>0) and (dist<noDetectionDist) then
            if (dist<maxDetectionDist) then
                dist=maxDetectionDist
            end
            detect[i]=1-((dist-maxDetectionDist)/(noDetectionDist-maxDetectionDist))
        else
            detect[i]=0
        end
end
----

Nesse momento do código definimos uma velocidade para os dois atuadores do Pioneer e uma condição de parada dependendo da pose do Pioneer no simulador. Para isso, foi necessário definir qual era o objeto da cena que precisávamos colher informações.
[source, c]
----
    -- Definindo valores das velocidade esquerda e direita
    vLeft=1.8
    vRight=2.0
    
    -- Pegando informacoes do pioneer
    pioneer=simGetObjectHandle('Pioneer_p3dx')
    -- Pegando posicao do pioneer
    PosPioneer=simGetObjectPosition(pioneer,-1)
    -- Pegando o x do pioneer
    t=PosPioneer[1]
    
    -- Verifica se chegou na referencia
    if (t > 0.0) then
        vLeft = 0.0
        vRight = 0.0
    end 
----

No código base do Pioneer 3-At do V-Rep já vem configurado a possibilidade de reações há detecção de obstáculos como observado abaixo. São acionadas as velocidades do Robô Pioneer 3-At, representadas por vLeft e vRight, de acordo com a detecção dos sensores. 
[source, c]
----
    -- Varrer os sensores da frente do pioneer
    for i=2,7,1 do
        if ( detect[i] > 0 )then -- Se estiver detectando obstáculo
	    -- Realiza um desvio para o lado oposto
            vLeft=vLeft+braitenbergL[i]*detect[i]
            vRight=vRight+braitenbergR[i]*detect[i]
        end
    end
----

Por fim, é necessário enviar as informações de velocidades para os motores. 
[source, c]
----
    -- Envia informações para os atuadores    
    simSetJointTargetVelocity(motorLeft,vLeft)
    simSetJointTargetVelocity(motorRight,vRight)
----


=== Plugins e Add-ons

Duas abordagens bastante semelhantes e que possibilitam a interação de dispositivos externos
[options="compact"]
 - Joysticks e Wii 
++++
<p align="center">
<iframe width="560" height="315" src="https://www.youtube.com/embed/GSa8MsBZGIo" frameborder="0" allowfullscreen></iframe>
</p>
++++

 - Microcontrolador e Sensores
++++
<p align="center">
<iframe width="560" height="315" src="https://www.youtube.com/embed/ZJQV2FlGFBo" frameborder="0" allowfullscreen></iframe>
</p>
++++

=== Ros node

Existem dois plugins disponíveis para possibilitar a comunicação com o Ros
[options="compact"]
 - http://www.coppeliarobotics.com/helpFiles/en/rosInterf.htm[RosInterface] 
 - http://www.coppeliarobotics.com/helpFiles/en/rosInterfaceOverview.htm[RosPlugin]

=== Api remota

Construção de http://www.coppeliarobotics.com/helpFiles/en/remoteApiClientSide.htm[programas externos] que se comunicam como clientes com o simulador.
[options="compact"]
 - C++
 - Java
 - Lua
 - Urbi
 - Matlab
 - Octave
 - Python
   * Habilitar o script principal do v-rep para possibilitar a inicialização como servidor simExtRemoteApiStart(portNumber)
   * Copiar o arquivo vrep.py para o mesmo diretório do cliente.py
   * Copiar o arquivo vrepConst.py para o mesmo diretório do cliente.py
   * Copiar a biblioteca da api remota "remoteApi.dll" (Windows), "remoteApi.dylib" (Mac) or "remoteApi.so" (Linux)

=== Código
[source,python]
----
include::codes/python/cliente.py[]
----

=== Descrição do programa
Foram incluídas nas primeiras linhas do arquivo link:codes/python/cliente.py[cliente.py] todas as configurações necessárias para o funcionamento adequado do modelo do robô Pioneer 3-AT.
[source, python]
----
#definicoes iniciais
serverIP = '127.0.0.1'
serverPort = 19999
leftMotorHandle = 0
vLeft = 0.
rightMotorHandle = 0
vRight = 0.
sensorHandle = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] 
----

Inserimos as variáveis do modelo e da cena de forma semelhante ao arquivo de configuração inicial do lua.
[source, python]
----
# variaveis de cena e movimentação do pioneer
noDetectionDist=0.5
maxDetectionDist=0.2
detect=[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
braitenbergL=[-0.2,-0.4,-0.6,-0.8,-1,-1.2,-1.4,-1.6, 0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
braitenbergR=[-1.6,-1.4,-1.2,-1,-0.8,-0.6,-0.4,-0.2, 0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
v0=2
----

Tentamos estabelecer a conexão com o servidor, por este motivo é necessário que o servidor esteja em execução.
[source, python]
----
clientID = vrep.simxStart(serverIP,serverPort,True,True,2000,5)
----

É necessário especificar quais são os manipuladores dos atuadores e dos sensores do Pioneer serão habilitados.
[source, python]
----
    # inicialização dos motores
    erro, leftMotorHandle = vrep.simxGetObjectHandle(clientID,'Pioneer_p3dx_leftMotor',
vrep.simx_opmode_oneshot_wait)
    if erro <> 0:
        print 'Handle do motor esquerdo nao encontrado!'
    else:
        print 'Conectado ao motor esquerdo!'

    erro, rightMotorHandle = vrep.simxGetObjectHandle(clientID,'Pioneer_p3dx_rightMotor',
vrep.simx_opmode_oneshot_wait)
    if erro <> 0:
        print 'Handle do motor direito nao encontrado!'
    else:
        print 'Conectado ao motor direito!'

    #inicialização dos sensores (remoteApi)
    for i in range(16):
        erro, sensorHandle[i] = vrep.simxGetObjectHandle(clientID, 
"Pioneer_p3dx_ultrasonicSensor%d" % (i+1),vrep.simx_opmode_oneshot_wait)
        if erro <> 0:
            print "Handle do sensor Pioneer_p3dx_ultrasonicSensor%d nao encontrado!" % (i+1)
        else:
            print "Conectado ao sensor Pioneer_p3dx_ultrasonicSensor%d!" % (i+1)
            erro, state, coord, detectedObjectHandle, detectedSurfaceNormalVector = 
vrep.simxReadProximitySensor(clientID, sensorHandle[i],vrep.simx_opmode_streaming)

----

Realizar a rotina de desvio de obstáculo, padrão do modelo do Pioneer 3-AT, acionar os atuadores e se desconectar do servidor
[source, python]
----
    #desvio e velocidade do robo
    while vrep.simxGetConnectionId(clientID) != -1:
        for i in range(16):
            erro, state, coord, detectedObjectHandle, detectedSurfaceNormalVector =
 vrep.simxReadProximitySensor(clientID, sensorHandle[i],vrep.simx_opmode_buffer)
            if erro == 0:
                dist = coord[2]
                if state > 0 and dist < noDetectionDist:
                    if dist < maxDetectionDist:
                        dist = maxDetectionDist

                    detect[i] = 1-((dist-maxDetectionDist) / (noDetectionDist-maxDetectionDist))
                else:
                    detect[i] = 0
            else:
                detect[i] = 0

        vLeft = v0
        vRight = v0

        for i in range(16):
            vLeft  = vLeft  + braitenbergL[i] * detect[i]
            vRight = vRight + braitenbergR[i] * detect[i]

        # atualiza velocidades dos motores
        erro = vrep.simxSetJointTargetVelocity(clientID, leftMotorHandle, vLeft,
 vrep.simx_opmode_streaming)
        erro = vrep.simxSetJointTargetVelocity(clientID, rightMotorHandle, vRight,
 vrep.simx_opmode_streaming)

    vrep.simxFinish(clientID) # fechando conexao com o servidor
----
