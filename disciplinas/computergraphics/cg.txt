Computação Gráfica
------------------

CG é uma área da computação dedicada a *criação*, *armazenamento* e *manipulação de imagens* baseada em modelos matemáticos.

image::images/img0.png[height=280, width=280, align="center"]

Lecture 1
---------

Iniciaremos nosso curso aprendendo como construir uma imagem.

=== Portable Pixel Map (PPM)

O formato PPM nasceu no final da década de latexmath:[80] para compartilhar imagens facilmente entre diferentes plataformas.

.Definição da Wikipedia
image::images/img1.png[height=150, width=500, align="center"]


=== Código

Podemos escrever um código em C para construir uma imagem usando o formato PPM. Este objetivo será alcançado através da análise
do programa link:codes/ppm_create.c[ppm_create.c].

.Imagem PPM construída a partir do código "ppm_create.c"
image::images/img2.png[height=256,width=256, align="center"]

[source, c]
----
include::codes/ppm_create.c[]
----

=== Descrição do programa
Inserimos na primeira linha do arquivo a biblioteca para lidar com entrada/saída de dados na linguagem C.

[source, c]
----
#include <stdio.h>
----

Definimos as dimensões (largura e altura) da imagem que estamos construindo.

[source, c]
----
int width = 256;
int height = 256;
----

Em seguida, configuramos o cabeçalho do formato PPM.

[source, c]
----
printf("P3\n %d \t %d\n 255\n", width, height);
----

No laço de repetição, percorremos a largura e altura da imagem preenchendo as cores dos pixels. 

[source, c]
----
for (int i = 0; i < height; i++){ // Altura
    for (int j = 0; j < width; j++){ // Largura
      printf("%d \t %d \t %d \n", i, j, 63);
    }
}
----

=== Compilação

O processo de compilação é realizado através do compilador GCC através do seguinte comando:

[source,c]
----
gcc <nome_arquivo>.c -o <nome_executavel> 
----

Este comando criará um arquivo executável e a saída deve ser direcionada para um arquivo com extensão ".ppm".

[source,c]
----
./<nome_executavel> > output.ppm
----


=== Exercício

- Construa uma imagem latexmath:[100 \times 100] usando o formato PPM com fundo preto que tem apenas 1 pixel vermelho no centro da imagem.

- Implemente uma função que altera o valor de um pixel da imagem.

- Codifique uma função que salva a imagem no formato PPM.

- Crie uma função que inicializa uma imagem com branco.

- Construa uma imagem latexmath:[100 \times 100] usando o formato PPM com fundo preto e escreva o caractere ' T ' no centro da imagem com
alto contraste em relação ao fundo da imagem.



////


Lecture 2
---------

=== Digital Differential Analyze (DDA)

Algoritmo clássico de rasterização de linhas. Este algoritmo utiliza a *equação da reta* para gerar pontos de uma linha entre dois pontos
latexmath:[(x_{0}, y_{0})] e latexmath:[(x_{1}, y_{1})], incrementando em intervalos fixos.

.Linha gerada pelo algoritmo DDA
image::images/img3.png[height=200,width=200, align="center"]

=== Código

A implementação do algoritmo DDA (disponível no arquivo link:codes/dda.c[dda.c]) exige conhecimento prévio de alguns detalhes matemáticos da equação da reta.

[source,c]
----
include::codes/dda.c[]
----

=== Descrição do programa

Iniciamos o código inserindo a biblioteca padrão de entrada/saída de dados da linguagem C e a biblioteca *stdlib.h* para obter o módulo de um número.

[source,c]
----
#include <stdio.h>
#include <stdlib.h> // abs
----

Após inserir as bibliotecas, optei por definir globalmente as dimensões da imagem e a própria imagem como um array multidimensional do tipo caractere sem sinal para
representar cada canal de cor com 8 bits.

[source,c]
----
#define width 200
#define height 200

unsigned char image[height][width][3];
----

Posteriormente, codifiquei algumas funções que serão úteis para manipular as imagens PPM. A primeira função foi para setar um valor de cor para um pixel.

[source,c]
----
void putPixel( int x, int y, unsigned char r, unsigned char g, unsigned char b){
  if (( x >= 0 ) && ( x <= width )  && ( y >= 0 ) && ( y <= height )){
    image[x][y][0] = r;
    image[x][y][1] = g;
    image[x][y][2] = b;
  }
}
----

A segunda função que implementei que nos ajudará é a função para preencher com branco toda a imagem.

[source,c]
----
void clearImage(){
  for (int y = 0; y < height; y++)
    for (int x = 0; x < width; x++)
      putPixel(x, y, 255, 255, 255);
}
----

Por fim, codifiquei uma função específica para salvar o array multidimensional no formato PPM.

[source,c]
----
void saveImage(){
  // Configurando o header do formato PPM
  printf("P3\n %d \t %d\n 255\n", width, height);

  for (int y = 0; y < height; y++){ // Altura
    for (int x = 0; x < width; x++){ // Largura
      for (int c = 0; c < 3; c++){ // Canal: r, g, b
        printf("%d \t", image[x][y][c]);
      }
      printf("\n");
    }
  }
}
----

O algoritmo DDA é implementado seguindo os seguintes passos:

- Calcular o valor de variação nos eixos x e y;
- Encontra a maior variação e adota ela como número de passos do algoritmo;
- Define o incremento em cada eixo;
- Pinta do ponto inicial até o ponto final incrementando os incrementos em cada eixo.

[source,c]
----
void drawDDA( int x0, int y0, int x1, int y1 ){
  // calcula a variacao
  int dx = x1 - x0;
  int dy = y1 - y0;

  // calcula o número de passos de incremento
  int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);

  // define o incremento em cada eixo
  float x_inc = (float) dx / steps;
  float y_inc = (float) dy / steps;

  float x = x0;
  float y = y0;

  for (int i = 0; i <= steps; i++){
    putPixel((int)x, (int)y, 255, 0, 0);
    x += x_inc;
    y += y_inc;
  }
}
----


=== Análise do algoritmo DDA

.Avaliando vantagens e desvantagens do algoritmo DDA
[cols="1,1"]
|===
| *Vantagens* | *Desvantagens*
| Simples de implementar | Usa ponto flutuante
| Funciona em qualquer inclinação | Pode causar acúmulo de erros de arredondamento
|===

=== Exercícios

- Implemente uma função que os argumentos são os pontos de um polígono convexo e o retorno é uma imagem PPM.

- Codifique um algoritmo para desenhar um triangulo isosceles.

- Construa um código que desenha uma casa simples com o algoritmo DDA.


Lecture 3
---------

=== Bresenham

Jack Bresenham propôs em 1965 no artigo link:https://ieeexplore.ieee.org/document/5388473['Algorithm for Computer Control of a Digital Plotter'] um algoritmo de
rasterização de linhas com tipo inteiro. No texto link:paper/Bresenham.pdf[Bresenham's Algorithm] contém uma breve explicação sobre o algoritmo.


.Linhas gerada pelo algoritmo de Bresenham
image::images/img4.png[height=200,width=200, align="center"]

=== Código

A implementação do algoritmo de Bresenham está disponível no arquivo link:codes/bresenhamLines.c[bresenhamLines.c].

[source,c]
----
include::codes/bresenhamLines.c[]
----

=== Descrição do programa

Neste momento, estaríamos repetindo todo o processo descrito anteriormente. Para evitar redundância, descreveremos
apenas o conteúdo que adicionamos ao arquivo. Sendo assim, falaremos sobre a função *drawBresenhamLinesIncomplete*. Esta
função é descrita no texto link:paper/Bresenham.pdf[Bresenham's Algorithm].

[source,c]
----
void drawBresenhamLinesIncomplete( int x0, int y0, int x1, int y1 ){
  
  // calcula a variacao
  int dx = x1 - x0;
  int dy = y1 - y0;
  
  // calcula o erro
  int D = (2 * dy) - dx;

  int x = x0;
  int y = y0;

  putPixel(x, y, 255, 0, 0);

  while (x < x1){
    x = x + 1;
    if ( D < 0 ){
      D = D + (2 * dy);
    }
    else{
      y = y + 1;
      D = D + (2 * ( dy - dx ));
    }
    putPixel(x, y, 255, 0, 0);
  }

}
----

Na função *drawBresenhamLines*, incluimos todos os quadrantes como sugerido no artigo supracitado.

[source,c]
----
void drawBresenhamLines( int x0, int y0, int x1, int y1 ){
  // calcula a variacao absoluta
  int dx = abs(x1 - x0);
  int dy = abs(y1 - y0);

  // indica a direcao da reta
  int sx = (x0 < x1) ? 1 : -1; // direção de x
  int sy = (y0 < y1) ? 1 : -1; // direção de y

  // calcula o erro
  int erro = dx - dy;
  
  while (1) {
    putPixel(x0, y0, 250, 0, 0);

    // Quando a condicao for alcancada finaliza o loop
    if (x0 == x1 && y0 == y1) break;

    // atualiza o erro
    int erro2 = 2 * erro;
    
    if (erro2 > -dy) { // verifica se o erro esta acima
      erro -= dy;
      x0 += sx;
    }
    
    if (erro2 < dx) { // verifica se o erro esta abaixo
      erro += dx;
      y0 += sy;
    }
  }
}
----

=== Renderização de modelos 3D

O formato `.obj` (link:https://en.wikipedia.org/wiki/Wavefront_.obj_file[Wavefront OBJ]) é um padrão amplamente utilizado para representar modelos 3D de forma simples e legível. Ele armazena informações sobre vértices (`v`), normais (`vn`), texturas (`vt`) e faces (`f`), onde cada face é formada por índices
que referenciam os vértices previamente definidos. As faces podem ser triangulares ou poligonais e podem incluir referências
opcionais a coordenadas de textura e normais no formato `f v/vt/vn`.


.Modelo tridimensional gerado a partir da renderização em wireframe
image::images/img5.png[height=200,width=400, align="center"]


////
